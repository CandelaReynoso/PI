{"ast":null,"code":"// estado inicial de nuestro reducer.\n// acá traigo la lista de las razas, los temperamentos, y los detalles (si se pidieron)\n// dogsCopy es una copia de dogs. sobre esta se hacen los filtros (para evitar problemas con array ya filtrado)\n\nconst initialState = {\n  dogs: [],\n  details: [],\n  dogsCopy: [],\n  temperaments: []\n};\nfunction rootReducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case 'GET_DOGS':\n      return {\n        ...state,\n        dogs: action.payload,\n        dogsCopy: action.payload\n      };\n    case \"GET_TEMPERAMENTS\":\n      //const filteredTemp = action.payload.filter((temp) => temp.name !== \"\"); //eliminar razas con strings vacios\n      return {\n        ...state,\n        temperaments: action.payload\n      };\n    //filtrar una lista de perros según un temperamento determinado        \n    case \"GET_FILTER_TEMPERAMENTS\":\n      // Se asigna la lista completa de perros al arreglo allDogs\n      const allDogs = state.dogsCopy;\n      const filterDog = action.payload === 'all' ? allDogs : allDogs.filter(e => {\n        var _e$temperament;\n        return (_e$temperament = e.temperament) === null || _e$temperament === void 0 ? void 0 : _e$temperament.includes(action.payload);\n      });\n      const filterDB = [];\n      allDogs.forEach(e => {\n        if (typeof e.id === 'string') {\n          var _e$temperament2;\n          (_e$temperament2 = e.temperament) === null || _e$temperament2 === void 0 ? void 0 : _e$temperament2.forEach(t => {\n            if (t === action.payload) filterDB.push(t);\n          });\n        }\n      });\n      return {\n        ...state,\n        dogs: filterDog.concat(filterDB)\n      };\n    default:\n      return state;\n  }\n}\nexport default rootReducer;","map":{"version":3,"names":["initialState","dogs","details","dogsCopy","temperaments","rootReducer","state","arguments","length","undefined","action","type","payload","allDogs","filterDog","filter","e","_e$temperament","temperament","includes","filterDB","forEach","id","_e$temperament2","t","push","concat"],"sources":["C:/Users/Thinkpad/OneDrive/Escritorio/PI-DOGS-Clonado/PI-DOGS-OK/PI-DOGS-/PI-Dogs-main/client/src/redux/reducer/reducer.js"],"sourcesContent":["// estado inicial de nuestro reducer.\r\n// acá traigo la lista de las razas, los temperamentos, y los detalles (si se pidieron)\r\n// dogsCopy es una copia de dogs. sobre esta se hacen los filtros (para evitar problemas con array ya filtrado)\r\n\r\n\r\nconst initialState = {\r\n    dogs: [],\r\n    details: [],\r\n    dogsCopy: [],\r\n    temperaments: [],\r\n};\r\n\r\nfunction rootReducer(state = initialState, action) {\r\n    switch(action.type) {\r\n        case 'GET_DOGS':\r\n            return {\r\n                ...state,\r\n                dogs: action.payload,\r\n                dogsCopy: action.payload\r\n            }\r\n\r\n        case \"GET_TEMPERAMENTS\":\r\n        //const filteredTemp = action.payload.filter((temp) => temp.name !== \"\"); //eliminar razas con strings vacios\r\n                return {\r\n                  ...state,\r\n                  temperaments: action.payload\r\n                };       \r\n        //filtrar una lista de perros según un temperamento determinado        \r\n        case \"GET_FILTER_TEMPERAMENTS\":\r\n           // Se asigna la lista completa de perros al arreglo allDogs\r\n            const allDogs= state.dogsCopy\r\n            \r\n            const filterDog = (action.payload === 'all') ? allDogs : allDogs.filter(e => e.temperament?.includes(action.payload));\r\n            \r\n            const filterDB = [];\r\n            allDogs.forEach(e => {\r\n                if(typeof e.id === 'string'){\r\n                    e.temperament?.forEach(t => {\r\n                        if(t === action.payload) filterDB.push(t);\r\n                    })\r\n               }\r\n            })\r\n                return {\r\n                      ...state,\r\n                      dogs: filterDog.concat(filterDB)\r\n                    };     \r\n   \r\n                      default:\r\n                      return state;\r\n    }\r\n}\r\nexport default rootReducer;"],"mappings":"AAAA;AACA;AACA;;AAGA,MAAMA,YAAY,GAAG;EACjBC,IAAI,EAAE,EAAE;EACRC,OAAO,EAAE,EAAE;EACXC,QAAQ,EAAE,EAAE;EACZC,YAAY,EAAE;AAClB,CAAC;AAED,SAASC,WAAWA,CAAA,EAA+B;EAAA,IAA9BC,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGP,YAAY;EAAA,IAAEU,MAAM,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EAC7C,QAAOC,MAAM,CAACC,IAAI;IACd,KAAK,UAAU;MACX,OAAO;QACH,GAAGL,KAAK;QACRL,IAAI,EAAES,MAAM,CAACE,OAAO;QACpBT,QAAQ,EAAEO,MAAM,CAACE;MACrB,CAAC;IAEL,KAAK,kBAAkB;MACvB;MACQ,OAAO;QACL,GAAGN,KAAK;QACRF,YAAY,EAAEM,MAAM,CAACE;MACvB,CAAC;IACT;IACA,KAAK,yBAAyB;MAC3B;MACC,MAAMC,OAAO,GAAEP,KAAK,CAACH,QAAQ;MAE7B,MAAMW,SAAS,GAAIJ,MAAM,CAACE,OAAO,KAAK,KAAK,GAAIC,OAAO,GAAGA,OAAO,CAACE,MAAM,CAACC,CAAC;QAAA,IAAAC,cAAA;QAAA,QAAAA,cAAA,GAAID,CAAC,CAACE,WAAW,cAAAD,cAAA,uBAAbA,cAAA,CAAeE,QAAQ,CAACT,MAAM,CAACE,OAAO,CAAC;MAAA,EAAC;MAErH,MAAMQ,QAAQ,GAAG,EAAE;MACnBP,OAAO,CAACQ,OAAO,CAACL,CAAC,IAAI;QACjB,IAAG,OAAOA,CAAC,CAACM,EAAE,KAAK,QAAQ,EAAC;UAAA,IAAAC,eAAA;UACxB,CAAAA,eAAA,GAAAP,CAAC,CAACE,WAAW,cAAAK,eAAA,uBAAbA,eAAA,CAAeF,OAAO,CAACG,CAAC,IAAI;YACxB,IAAGA,CAAC,KAAKd,MAAM,CAACE,OAAO,EAAEQ,QAAQ,CAACK,IAAI,CAACD,CAAC,CAAC;UAC7C,CAAC,CAAC;QACP;MACH,CAAC,CAAC;MACE,OAAO;QACD,GAAGlB,KAAK;QACRL,IAAI,EAAEa,SAAS,CAACY,MAAM,CAACN,QAAQ;MACjC,CAAC;IAEC;MACA,OAAOd,KAAK;EAAC;AAEnC;AACA,eAAeD,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}