{"ast":null,"code":"// estado inicial de nuestro reducer.\n// acá traigo la lista de las razas, los temperamentos, y los detalles (si se pidieron)\n// dogsCopy es una copia de dogs. sobre esta se hacen los filtros (para evitar problemas con array ya filtrado)\n\nconst initialState = {\n  dogs: [],\n  details: [],\n  dogsCopy: [],\n  temperaments: [],\n  searchTerm: ''\n};\nfunction rootReducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case \"GET_DOGS\":\n      return {\n        ...state,\n        dogs: action.payload,\n        dogsCopy: action.payload\n      };\n    case \"GET_TEMPERAMENTS\":\n      //const filteredTemp = action.payload.filter((temp) => temp.name !== \"\"); //eliminar razas con strings vacios\n      return {\n        ...state,\n        temperaments: action.payload\n      };\n    //filtrar una lista de perros según un temperamento determinado        \n    case \"GET_FILTER_TEMPERAMENTS\":\n      // Se asigna la lista completa de perros al arreglo 'allDogs'\n      const allDogs = state.dogsCopy;\n\n      //El arreglo filterDog se filtra de acuerdo al valor del payload recibido en la acción. \n      //Si el value es \"all\", se devuelve la lista completa de perros allDogs, de lo contrario,\n      //se devuelve un arreglo filtrado por el temperamento recibido en la action.\n      const filterDog = action.payload === 'All' ? allDogs : allDogs.filter(e => {\n        var _e$temperament;\n        return (_e$temperament = e.temperament) === null || _e$temperament === void 0 ? void 0 : _e$temperament.includes(action.payload);\n      });\n\n      //Se recorre la lista completa de perros allDogs \n      //y se agrega al arreglo filterDB cada uno de los temperamentos \n      //que coincida con el valor del payload recibido en la acción\n      const filterDB = [];\n      allDogs.forEach(e => {\n        if (typeof e.id === 'string') {\n          var _e$temperament2;\n          (_e$temperament2 = e.temperament) === null || _e$temperament2 === void 0 ? void 0 : _e$temperament2.forEach(t => {\n            if (t === action.payload) filterDB.push(t);\n          });\n        }\n      });\n      //Finalmente, se retorna un nuevo objeto de estado,\n      //en el que se actualiza el arreglo dogs concatenando los arreglos filterDog y filterDB.\n      return {\n        ...state,\n        dogs: filterDog.concat(filterDB)\n      };\n    case 'GET_BY_NAME':\n      return {\n        ...state,\n        dogs: action.payload\n      };\n    case \"SEARCH_BREED\":\n      return {\n        ...state,\n        searchTerm: action.payload\n      };\n    case \"GET_BY_ID\":\n      return {\n        ...state,\n        details: action.payload\n      };\n    case \"SORT_BY_WEIGHT\":\n      if (state.dogs === 'Breed not found :(') return {\n        ...state\n      };\n      const pesoOrdenado = action.payload === \"min\" ? state.dogs.sort((a, b) => {\n        if (a.weight.includes('NaN')) {\n          return 1000;\n        } else {\n          if (parseInt(a.weight.split(' - ')[0]) > parseInt(b.weight.split(' - ')[0])) return 1;\n          if (parseInt(a.weight.split(' - ')[0]) < parseInt(b.weight.split(' - ')[0])) return -1;\n          return 0;\n        }\n      }) : state.dogs.sort((a, b) => {\n        if (a.weight.includes('NaN')) {\n          return 1000;\n        } else {\n          if (parseInt(a.weight.split(' - ')[0]) > parseInt(b.weight.split(' - ')[0])) return -1;\n          if (parseInt(a.weight.split(' - ')[0]) < parseInt(b.weight.split(' - ')[0])) return 1;\n          return 0;\n        }\n      });\n      return {\n        ...state,\n        dogs: pesoOrdenado\n      };\n    case 'ORDER_BY_NAME':\n      let sortedArr = action.payload === 'asc' ? state.dogs.sort(function (a, b) {\n        if (a.name > b.name) {\n          return 1;\n        }\n        if (b.name > a.name) {\n          return -1;\n        }\n        return 0;\n      }) : state.dogs.sort(function (a, b) {\n        if (a.name > b.name) {\n          return -1;\n        }\n        if (b.name > a.name) {\n          return 1;\n        }\n      });\n      return {\n        ...state,\n        dogs: sortedArr\n      };\n    case \"FILTERED_BY_ORIGIN\":\n      const allDoggys1 = state.dogsCopy;\n      const originFilter = action.payload === 'created' ? allDoggys1.filter(el => el.filterDB) : allDoggys1.filter(el => !el.CreatedInDb);\n      return {\n        ...state,\n        dogsCopy: action.payload === 'all' ? state.allDoggys1 : originFilter\n      };\n    default:\n      return state;\n  }\n}\nexport default rootReducer;","map":{"version":3,"names":["initialState","dogs","details","dogsCopy","temperaments","searchTerm","rootReducer","state","arguments","length","undefined","action","type","payload","allDogs","filterDog","filter","e","_e$temperament","temperament","includes","filterDB","forEach","id","_e$temperament2","t","push","concat","pesoOrdenado","sort","a","b","weight","parseInt","split","sortedArr","name","allDoggys1","originFilter","el","CreatedInDb"],"sources":["C:/Users/Thinkpad/OneDrive/Escritorio/PI-DOGS-Clonado/PI-DOGS-OK/PI-DOGS-/PI-Dogs-main/client/src/redux/reducer/reducer.js"],"sourcesContent":["// estado inicial de nuestro reducer.\r\n// acá traigo la lista de las razas, los temperamentos, y los detalles (si se pidieron)\r\n// dogsCopy es una copia de dogs. sobre esta se hacen los filtros (para evitar problemas con array ya filtrado)\r\n\r\n\r\nconst initialState = {\r\n    dogs: [],\r\n    details: [],\r\n    dogsCopy: [],\r\n    temperaments: [],\r\n    searchTerm: '',\r\n};\r\n\r\nfunction rootReducer(state = initialState, action) {\r\n    switch(action.type) {\r\n        case \"GET_DOGS\":\r\n            return {\r\n                ...state,\r\n                dogs: action.payload,\r\n                dogsCopy: action.payload\r\n            }\r\n\r\n        case \"GET_TEMPERAMENTS\":\r\n        //const filteredTemp = action.payload.filter((temp) => temp.name !== \"\"); //eliminar razas con strings vacios\r\n                return {\r\n                  ...state,\r\n                  temperaments: action.payload\r\n                };       \r\n        //filtrar una lista de perros según un temperamento determinado        \r\n        case \"GET_FILTER_TEMPERAMENTS\":\r\n           // Se asigna la lista completa de perros al arreglo 'allDogs'\r\n            const allDogs= state.dogsCopy\r\n\r\n            //El arreglo filterDog se filtra de acuerdo al valor del payload recibido en la acción. \r\n            //Si el value es \"all\", se devuelve la lista completa de perros allDogs, de lo contrario,\r\n            //se devuelve un arreglo filtrado por el temperamento recibido en la action.\r\n            const filterDog = (action.payload === 'All') ? allDogs : allDogs.filter(e => e.temperament?.includes(action.payload));\r\n            \r\n            //Se recorre la lista completa de perros allDogs \r\n            //y se agrega al arreglo filterDB cada uno de los temperamentos \r\n            //que coincida con el valor del payload recibido en la acción\r\n            const filterDB = [];\r\n            allDogs.forEach(e => {\r\n                if(typeof e.id === 'string'){\r\n                    e.temperament?.forEach(t => {\r\n                        if(t === action.payload) filterDB.push(t);\r\n                    })\r\n               }\r\n            })\r\n            //Finalmente, se retorna un nuevo objeto de estado,\r\n            //en el que se actualiza el arreglo dogs concatenando los arreglos filterDog y filterDB.\r\n                return {\r\n                      ...state,\r\n                      dogs: filterDog.concat(filterDB)\r\n                    };     \r\n                    \r\n        case 'GET_BY_NAME':\r\n                return {\r\n                ...state,\r\n                dogs: action.payload\r\n             }\r\n        \r\n        \r\n        case \"SEARCH_BREED\":\r\n                return {\r\n                ...state,\r\n                searchTerm: action.payload\r\n             };\r\n\r\n        case \"GET_BY_ID\":\r\n                return {\r\n                    ...state,\r\n                    details: action.payload\r\n                }\r\n        case  \"SORT_BY_WEIGHT\":\r\n            if (state.dogs === 'Breed not found :(') return {...state}\r\n            const pesoOrdenado =\r\n            (action.payload === \"min\")\r\n                ? state.dogs.sort((a, b) => {\r\n                    if (a.weight.includes('NaN')) {\r\n                    return 1000;\r\n                    } else {\r\n                        if (parseInt(a.weight.split(' - ')[0]) > parseInt(b.weight.split(' - ')[0])) return 1;\r\n                        if (parseInt(a.weight.split(' - ')[0]) < parseInt(b.weight.split(' - ')[0])) return -1;\r\n                        return 0;\r\n                    }\r\n                })\r\n\r\n                : state.dogs.sort((a, b) => {\r\n                    if (a.weight.includes('NaN')) {\r\n                    return 1000;\r\n                    } else {\r\n                        if (parseInt(a.weight.split(' - ')[0]) > parseInt(b.weight.split(' - ')[0])) return -1;\r\n                        if (parseInt(a.weight.split(' - ')[0]) < parseInt(b.weight.split(' - ')[0])) return 1;\r\n                        return 0;\r\n                    }\r\n                });\r\n            \r\n            return {\r\n                ...state,\r\n                dogs: pesoOrdenado\r\n            };\r\n\r\n            case 'ORDER_BY_NAME':\r\n                let sortedArr = action.payload === 'asc' ?\r\n                    state.dogs.sort(function (a, b) {\r\n                        if(a.name > b.name){\r\n                            return 1;\r\n                        }\r\n                        if(b.name > a.name){\r\n                            return -1;\r\n                        }\r\n                        return 0;\r\n                    }) :\r\n                    state.dogs.sort(function (a,b) {\r\n                        if(a.name >b.name) {\r\n                            return -1;\r\n                        }\r\n                        if(b.name > a.name) {\r\n                            return 1;\r\n                        }\r\n                    })\r\n                    return {\r\n                        ...state,\r\n                        dogs: sortedArr\r\n                    };\r\n\r\n                    case \"FILTERED_BY_ORIGIN\":\r\n                        const allDoggys1 = state.dogsCopy;\r\n                        const originFilter = action.payload === 'created' ?  \r\n                        allDoggys1.filter((el) => el.filterDB) \r\n                        : allDoggys1.filter((el) => !el.CreatedInDb)\r\n                        return {\r\n                            ...state,\r\n                            dogsCopy: action.payload === 'all' ? state.allDoggys1 : originFilter\r\n                        }\r\n                    \r\n\r\n\r\n\r\n\r\n\r\n                      default:\r\n                      return state;\r\n    }\r\n}\r\nexport default rootReducer;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}